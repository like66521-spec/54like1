// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// 用户模型
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  avatar    String?
  role      UserRole @default(USER)
  bio       String?
  coins     Int      @default(0) // 虚拟货币
  level     Int      @default(1) // 等级
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articles Article[]
  payments Payment[]
  comments Comment[]

  @@map("users")
}

enum UserRole {
  USER
  ADMIN
  SUPER_ADMIN
}

// 分类模型
model Category {
  id          String    @id @default(cuid())
  name        String
  slug        String    @unique
  description String?
  order       Int       @default(0)
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  articles    Article[]

  @@map("categories")
}

// 文章模型
model Article {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  excerpt     String
  content     String
  coverImage  String?
  images      String @default("[]") // JSON 存储的图片URLs
  isPaid      Boolean  @default(false)
  price       Float?
  views       Int      @default(0)
  likes       Int      @default(0)
  isPinned    Boolean  @default(false)
  isPublished Boolean  @default(true)
  publishedAt DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  authorId String
  author   User   @relation(fields: [authorId], references: [id])

  payments Payment[]
  comments Comment[]

  @@index([categoryId])
  @@index([authorId])
  @@map("articles")
}

// 支付记录模型
model Payment {
  id            String        @id @default(cuid())
  amount        Float
  method        PaymentMethod
  status        PaymentStatus @default(PENDING)
  transactionId String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  articleId String
  article   Article @relation(fields: [articleId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([articleId])
  @@index([userId])
  @@map("payments")
}

enum PaymentMethod {
  WECHAT
  ALIPAY
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

// 评论模型
model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  articleId String
  article   Article @relation(fields: [articleId], references: [id], onDelete: Cascade)

  userId String
  user   User   @relation(fields: [userId], references: [id])

  parentId String?
  parent   Comment?  @relation("CommentReplies", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies  Comment[] @relation("CommentReplies")

  @@index([articleId])
  @@index([userId])
  @@index([parentId])
  @@map("comments")
}

// 菜单项模型
model MenuItem {
  id        String   @id @default(cuid())
  label     String
  icon      String?
  href      String?
  color     String?
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_items")
}

// 侧边栏小工具模型
model SidebarWidget {
  id        String       @id @default(cuid())
  type      WidgetType
  title     String
  content   String? // For HTML widget
  imageUrl  String? // For image widget
  linkUrl   String? // For image widget link
  config    Json? // For flexible configuration
  order     Int          @default(0)
  isActive  Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt

  @@map("sidebar_widgets")
}

enum WidgetType {
  HTML
  IMAGE
  HOT_ARTICLES
  LATEST_ARTICLES
  LINKS
  USER_RANK
}

// 系统设置模型
model Settings {
  id        String   @id @default(cuid())
  key       String   @unique
  value     String
  label     String
  type      String   @default("text") // text, textarea, number, boolean, json
  group     String   @default("general") // general, seo, payment, email, etc
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("settings")
}

